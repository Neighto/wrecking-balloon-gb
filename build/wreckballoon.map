ROM0 bank #0:
  SECTION: $0000-$0035 ($0036 bytes) ["graphics"]
           $0000 = LoadGameData
           $002b = SetupPalettes
  SECTION: $0036-$003a ($0005 bytes) ["otherfornow"]
           $0036 = TurnOffAudio
  SECTION: $0040-$0040 ($0001 byte) ["VBlank IRQ"]
  SECTION: $0048-$0048 ($0001 byte) ["LCD IRQ Vector"]
           $0048 = LCD_VECT
  SECTION: $0050-$0050 ($0001 byte) ["Timer IRQ Vector"]
           $0050 = TIMER_VECT
  SECTION: $0058-$0058 ($0001 byte) ["Serial IRQ Vector"]
           $0058 = SERIAL_VECT
  SECTION: $0060-$0060 ($0001 byte) ["Joypad IRQ Vector"]
           $0060 = JOYPAD_VECT
  SECTION: $0061-$00e0 ($0080 bytes) ["Cactus_Tiles"]
           $0061 = CactusTiles
           $00e1 = CactusTilesEnd
  SECTION: $00e1-$00fc ($001c bytes) ["OAM DMA routine"]
           $00e1 = CopyDMARoutine
           $00e8 = CopyDMARoutine.copy
           $00ef = DMARoutine
           $00f3 = DMARoutine.wait
           $00f7 = DMARoutineEnd
           $00f7 = OAMDMA
  SECTION: $0100-$014f ($0050 bytes) ["Start"]
  SECTION: $0150-$038f ($0240 bytes) ["Background_Map"]
           $0150 = BackgroundMap
           $0390 = BackgroundMapEnd
  SECTION: $0390-$0406 ($0077 bytes) ["joypad"]
           $0390 = ReadInput
           $03c0 = JOY_RIGHT
           $03c8 = JOY_LEFT
           $03d0 = JOY_UP
           $03d8 = JOY_DOWN
           $03e0 = JOY_A
           $03e8 = JOY_B
           $03f0 = JOY_SELECT
           $03fa = JOY_START
           $0404 = JOY_FALSE
  SECTION: $0407-$0466 ($0060 bytes) ["Background_Tiles"]
           $0407 = BackgroundTiles
           $0467 = BackgroundTilesEnd
  SECTION: $0467-$0499 ($0033 bytes) ["Math Div 16 Code"]
           $0467 = DIVIDE
           $0473 = DIVIDE.nxtbit
           $0497 = DIVIDE.noadd
  SECTION: $049a-$04ca ($0031 bytes) ["rom"]
           $049a = START
           $04b9 = GAMELOOP
  SECTION: $04cb-$04e0 ($0016 bytes) ["scroll"]
           $04cb = VBlankHScroll
           $04de = VBlankHScroll.end
    SLACK: $3b43 bytes

ROMX bank #1:
  SECTION: $4000-$415a ($015b bytes) ["player"]
           $4000 = InitializePlayer
           $4048 = IncrementPosition
           $404e = DecrementPosition
           $4056 = MoveBalloonUp
           $4063 = MoveBalloonRight
           $4070 = MoveBalloonLeft
           $407d = MoveBalloonDown
           $408a = MoveCactusUp
           $4097 = MoveCactusRight
           $40a4 = MoveCactusLeft
           $40b1 = MoveCactusDown
           $40be = MoveRight
           $40be = BobCactusDown
           $40c5 = MoveLeft
           $40cc = MoveDown
           $40d3 = MoveUp
           $40da = SpeedUp
           $40e0 = ResetSpeedUp
           $40e6 = PlayerMovement
           $40ff = PlayerMovement.endRight
           $410a = PlayerMovement.endLeft
           $4115 = PlayerMovement.endUp
           $4120 = PlayerMovement.endDown
           $412c = PlayerMovement.endA
           $412f = PlayerMovement.end
           $4130 = PlayerAnimate
           $4142 = PlayerAnimate.bobUp
           $414b = PlayerAnimate.bobDown
           $4153 = PlayerAnimate.end
           $4154 = PlayerUpdate
  SECTION: $415b-$41ee ($0094 bytes) ["point balloon"]
           $415b = InitializePointBalloon
           $4178 = DecrementPosition
           $417f = FloatPointBalloonUp
           $418c = PointBalloonMovement
           $4196 = PointBalloonMovement.end
           $4197 = PopPointBalloonAnimation
           $4198 = CollisionCheck
           $41b4 = CollisionCheck.tryOtherY
           $41c7 = CollisionCheck.checkX
           $41d8 = CollisionCheck.tryOtherX
           $41eb = CollisionCheck.doSomething
           $41ee = CollisionCheck.end
  SECTION: $41ef-$4219 ($002b bytes) ["lcd"]
           $41ef = LCD_OFF
           $41f4 = LCD_ON
           $41f9 = WAIT_VBLANK
           $4200 = ClearMap
           $4207 = ClearMap.clear_map_loop
  SECTION: $421a-$4241 ($0028 bytes) ["memory"]
           $421a = MEMCPY.memcpy_loop
           $421a = MEMCPY
           $421e = MEMCPY.memcpy_check_limit
           $4224 = ClearOAM
           $422a = ClearOAM.clear_oam_loop
           $4233 = ClearRAM
           $4239 = ClearRAM.clear_ram_loop
    SLACK: $3dbe bytes

WRAM0 bank #0:
  SECTION: $c000-$c009 ($000a bytes) ["RAM vars"]
           $c000 = scroll_timer
           $c001 = movement_timer
           $c002 = collision_timer
           $c003 = player_bob_timer
           $c004 = player_bobbed_up
           $c005 = joypad_down
           $c006 = joypad_pressed
           $c007 = player_speed
           $c008 = player_x
           $c009 = player_y
  SECTION: $c00a-$c00c ($0003 bytes) ["Math Div 16 Ram"]
           $c00a = _MD16temp
           $c00c = _MD16count
  SECTION: $c100-$c113 ($0014 bytes) ["OAM vars"]
           $c100 = player_balloon
           $c108 = player_cactus
           $c110 = point_balloon
    SLACK: $0fdf bytes

HRAM bank #0:
  SECTION: $ff80-$ff87 ($0008 bytes) ["OAM DMA"]
           $ff80 = hOAMDMA
    SLACK: $0077 bytes

USED:
    ROM0: $04bd bytes in 1 bank
    ROMX: $0242 bytes in 1 bank
    WRAM0: $0021 bytes in 1 bank
    HRAM: $0008 bytes in 1 bank
