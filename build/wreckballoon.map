ROM0 bank #0:
  SECTION: $0000-$0034 ($0035 bytes) ["rom"]
           $0000 = START
           $0026 = GAMELOOP
  SECTION: $0040-$0040 ($0001 byte) ["VBlank IRQ"]
  SECTION: $0048-$0048 ($0001 byte) ["LCD IRQ Vector"]
           $0048 = LCD_VECT
  SECTION: $0050-$0050 ($0001 byte) ["Timer IRQ Vector"]
           $0050 = TIMER_VECT
  SECTION: $0058-$0058 ($0001 byte) ["Serial IRQ Vector"]
           $0058 = SERIAL_VECT
  SECTION: $0060-$0060 ($0001 byte) ["Joypad IRQ Vector"]
           $0060 = JOYPAD_VECT
  SECTION: $0061-$00e0 ($0080 bytes) ["Cactus_Tiles"]
           $0061 = CactusTiles
           $00e1 = CactusTilesEnd
  SECTION: $00e1-$00fc ($001c bytes) ["OAM DMA routine"]
           $00e1 = CopyDMARoutine
           $00e8 = CopyDMARoutine.copy
           $00ef = DMARoutine
           $00f3 = DMARoutine.wait
           $00f7 = OAMDMA
           $00f7 = DMARoutineEnd
  SECTION: $0100-$014f ($0050 bytes) ["Start"]
  SECTION: $0150-$038f ($0240 bytes) ["Background_Map"]
           $0150 = BackgroundMap
           $0390 = BackgroundMapEnd
  SECTION: $0390-$0406 ($0077 bytes) ["joypad"]
           $0390 = ReadInput
           $03c0 = JOY_RIGHT
           $03c8 = JOY_LEFT
           $03d0 = JOY_UP
           $03d8 = JOY_DOWN
           $03e0 = JOY_A
           $03e8 = JOY_B
           $03f0 = JOY_SELECT
           $03fa = JOY_START
           $0404 = JOY_FALSE
  SECTION: $0407-$0466 ($0060 bytes) ["Background_Tiles"]
           $0407 = BackgroundTiles
           $0467 = BackgroundTilesEnd
  SECTION: $0467-$0499 ($0033 bytes) ["Math Div 16 Code"]
           $0467 = DIVIDE
           $0473 = DIVIDE.nxtbit
           $0497 = DIVIDE.noadd
  SECTION: $049a-$04c1 ($0028 bytes) ["Graphics"]
           $049a = LoadGameData
  SECTION: $04c2-$04d7 ($0016 bytes) ["Scrolling"]
           $04c2 = VBlank_HScroll
           $04d5 = VBlank_HScroll.end
    SLACK: $3b52 bytes

ROMX bank #1:
  SECTION: $4000-$4154 ($0155 bytes) ["player"]
           $4000 = InitializePlayer
           $4048 = IncrementPosition
           $404e = DecrementPosition
           $4056 = MoveRight
           $406f = MoveLeft
           $4088 = MoveDown
           $40a1 = MoveUp
           $40ba = SpeedUp
           $40c0 = ResetSpeedUp
           $40c6 = MoveCactusUp
           $40d3 = MoveCactusDown
           $40e0 = PlayerMovement
           $40f9 = PlayerMovement.endRight
           $4104 = PlayerMovement.endLeft
           $410f = PlayerMovement.endUp
           $411a = PlayerMovement.endDown
           $4126 = PlayerMovement.endA
           $4129 = PlayerMovement.end
           $412a = PlayerAnimate
           $413c = PlayerAnimate.bobUp
           $4145 = PlayerAnimate.bobDown
           $414d = PlayerAnimate.end
           $414e = PlayerUpdate
  SECTION: $4155-$417f ($002b bytes) ["lcd"]
           $4155 = LCD_OFF
           $415a = LCD_ON
           $415f = WAIT_VBLANK
           $4166 = CLEAR_MAP
           $416d = CLEAR_MAP.clear_map_loop
  SECTION: $4180-$41a7 ($0028 bytes) ["memory"]
           $4180 = MEMCPY.memcpy_loop
           $4180 = MEMCPY
           $4184 = MEMCPY.memcpy_check_limit
           $418a = CLEAR_OAM
           $4190 = CLEAR_OAM.clear_oam_loop
           $4199 = CLEAR_RAM
           $419f = CLEAR_RAM.clear_ram_loop
    SLACK: $3e58 bytes

WRAM0 bank #0:
  SECTION: $c000-$c008 ($0009 bytes) ["RAM Vars"]
           $c000 = scroll_timer
           $c001 = movement_timer
           $c002 = player_bob_timer
           $c003 = player_bobbed_up
           $c004 = joypad_down
           $c005 = joypad_pressed
           $c006 = player_speed
           $c007 = player_x
           $c008 = player_y
  SECTION: $c009-$c00b ($0003 bytes) ["Math Div 16 Ram"]
           $c009 = _MD16temp
           $c00b = _MD16count
  SECTION: $c100-$c10f ($0010 bytes) ["OAM Vars"]
           $c100 = player_balloon
           $c108 = player_cactus
    SLACK: $0fe4 bytes

HRAM bank #0:
  SECTION: $ff80-$ff87 ($0008 bytes) ["OAM DMA"]
           $ff80 = hOAMDMA
    SLACK: $0077 bytes

USED:
    ROM0: $04ae bytes in 1 bank
    ROMX: $01a8 bytes in 1 bank
    WRAM0: $001c bytes in 1 bank
    HRAM: $0008 bytes in 1 bank
