ROM0 bank #0:
  SECTION: $0000-$0035 ($0036 bytes) ["graphics"]
           $0000 = LoadGameData
           $002b = SetupPalettes
  SECTION: $0036-$003a ($0005 bytes) ["otherfornow"]
           $0036 = TurnOffAudio
  SECTION: $0040-$0040 ($0001 byte) ["VBlank IRQ"]
  SECTION: $0048-$0048 ($0001 byte) ["LCD IRQ Vector"]
           $0048 = LCD_VECT
  SECTION: $0050-$0050 ($0001 byte) ["Timer IRQ Vector"]
           $0050 = TIMER_VECT
  SECTION: $0058-$0058 ($0001 byte) ["Serial IRQ Vector"]
           $0058 = SERIAL_VECT
  SECTION: $0060-$0060 ($0001 byte) ["Joypad IRQ Vector"]
           $0060 = JOYPAD_VECT
  SECTION: $0061-$00d7 ($0077 bytes) ["joypad"]
           $0061 = ReadInput
           $0091 = JOY_RIGHT
           $0099 = JOY_LEFT
           $00a1 = JOY_UP
           $00a9 = JOY_DOWN
           $00b1 = JOY_A
           $00b9 = JOY_B
           $00c1 = JOY_SELECT
           $00cb = JOY_START
           $00d5 = JOY_FALSE
  SECTION: $00d8-$00f3 ($001c bytes) ["OAM DMA routine"]
           $00d8 = CopyDMARoutine
           $00df = CopyDMARoutine.copy
           $00e6 = DMARoutine
           $00ea = DMARoutine.wait
           $00ee = DMARoutineEnd
           $00ee = OAMDMA
  SECTION: $0100-$014f ($0050 bytes) ["Start"]
  SECTION: $0150-$038f ($0240 bytes) ["Background_Map"]
           $0150 = BackgroundMap
           $0390 = BackgroundMapEnd
  SECTION: $0390-$044f ($00c0 bytes) ["Cactus_Tiles"]
           $0390 = CactusTiles
           $0450 = CactusTilesEnd
  SECTION: $0450-$04af ($0060 bytes) ["Background_Tiles"]
           $0450 = BackgroundTiles
           $04b0 = BackgroundTilesEnd
  SECTION: $04b0-$04e2 ($0033 bytes) ["Math Div 16 Code"]
           $04b0 = DIVIDE
           $04bc = DIVIDE.nxtbit
           $04e0 = DIVIDE.noadd
  SECTION: $04e3-$0513 ($0031 bytes) ["rom"]
           $04e3 = START
           $0502 = GAMELOOP
  SECTION: $0514-$0529 ($0016 bytes) ["scroll"]
           $0514 = VBlankHScroll
           $0527 = VBlankHScroll.end
    SLACK: $3b03 bytes

ROMX bank #1:
  SECTION: $4000-$415a ($015b bytes) ["player"]
           $4000 = InitializePlayer
           $4048 = IncrementPosition
           $404e = DecrementPosition
           $4056 = MoveBalloonUp
           $4063 = MoveBalloonRight
           $4070 = MoveBalloonLeft
           $407d = MoveBalloonDown
           $408a = MoveCactusUp
           $4097 = MoveCactusRight
           $40a4 = MoveCactusLeft
           $40b1 = MoveCactusDown
           $40be = MoveRight
           $40be = BobCactusDown
           $40c5 = MoveLeft
           $40cc = MoveDown
           $40d3 = MoveUp
           $40da = SpeedUp
           $40e0 = ResetSpeedUp
           $40e6 = PlayerMovement
           $40ff = PlayerMovement.endRight
           $410a = PlayerMovement.endLeft
           $4115 = PlayerMovement.endUp
           $4120 = PlayerMovement.endDown
           $412c = PlayerMovement.endA
           $412f = PlayerMovement.end
           $4130 = PlayerAnimate
           $4142 = PlayerAnimate.bobUp
           $414b = PlayerAnimate.bobDown
           $4153 = PlayerAnimate.end
           $4154 = PlayerUpdate
  SECTION: $415b-$4226 ($00cc bytes) ["point balloon"]
           $415b = InitializePointBalloon
           $417d = DecrementPosition
           $4184 = FloatPointBalloonUp
           $4191 = PointBalloonUpdate
           $41a2 = PointBalloonUpdate.end
           $41a3 = PopBalloonAnimation
           $41a4 = DeathOfPointBalloon
           $41c9 = CollisionCheck
           $41ec = CollisionCheck.tryOtherY
           $41ff = CollisionCheck.checkX
           $4210 = CollisionCheck.tryOtherX
           $4223 = CollisionCheck.doSomething
           $4226 = CollisionCheck.end
  SECTION: $4227-$4251 ($002b bytes) ["lcd"]
           $4227 = LCD_OFF
           $422c = LCD_ON
           $4231 = WAIT_VBLANK
           $4238 = ClearMap
           $423f = ClearMap.clear_map_loop
  SECTION: $4252-$4279 ($0028 bytes) ["memory"]
           $4252 = MEMCPY.memcpy_loop
           $4252 = MEMCPY
           $4256 = MEMCPY.memcpy_check_limit
           $425c = ClearOAM
           $4262 = ClearOAM.clear_oam_loop
           $426b = ClearRAM
           $4271 = ClearRAM.clear_ram_loop
    SLACK: $3d86 bytes

WRAM0 bank #0:
  SECTION: $c000-$c00a ($000b bytes) ["RAM vars"]
           $c000 = scroll_timer
           $c001 = movement_timer
           $c002 = collision_timer
           $c003 = player_bob_timer
           $c004 = player_bobbed_up
           $c005 = joypad_down
           $c006 = joypad_pressed
           $c007 = player_speed
           $c008 = player_x
           $c009 = player_y
           $c00a = point_balloon_alive
  SECTION: $c00b-$c00d ($0003 bytes) ["Math Div 16 Ram"]
           $c00b = _MD16temp
           $c00d = _MD16count
  SECTION: $c100-$c133 ($0034 bytes) ["OAM vars"]
           $c100 = player_balloon
           $c108 = player_cactus
           $c110 = point_balloon
           $c114 = balloon_pop
    SLACK: $0fbe bytes

HRAM bank #0:
  SECTION: $ff80-$ff87 ($0008 bytes) ["OAM DMA"]
           $ff80 = hOAMDMA
    SLACK: $0077 bytes

USED:
    ROM0: $04fd bytes in 1 bank
    ROMX: $027a bytes in 1 bank
    WRAM0: $0042 bytes in 1 bank
    HRAM: $0008 bytes in 1 bank
